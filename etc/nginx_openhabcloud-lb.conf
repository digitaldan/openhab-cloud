ssl_certificate /etc/letsencrypt/live/YOURHOTST/fullchain.pem;
ssl_certificate_key /etc/letsencrypt/live/YOURHOTST/privkey.pem;

#socket.io connections NEED ip_hash routing, all other connections will be cookie or round robin
upstream socketapp {
	ip_hash;
	server 127.0.0.1:3000;
	server 127.0.0.1:3001;
	server 127.0.0.1:3002;
	server 127.0.0.1:3003;
}

#all other connections
upstream webapp {
	server 127.0.0.1:3000;
	server 127.0.0.1:3001;
	server 127.0.0.1:3002;
	server 127.0.0.1:3003;
}


#redirect http -> https
server {
	listen 80 default_server;
	listen [::]:80 default_server;
	server_name my.YOURHOTST.com home.YOURHOTST.com;
	return 301 https://$server_name$request_uri;
}

# Main myopenhab.org requests
server {
	listen 443 ssl;
	server_name my.YOURHOTST.com home.YOURHOTST.com;

	charset utf-8;

	access_log /var/log/nginx/my.openhab.org-access.log;
	error_log /var/log/nginx/my.openhab.org-error.log;
	client_max_body_size 300m;

	root /var/www/html;

	location ~ /.well-known {
	allow all;
	}

	#local file locations
	location /css {
		alias  /opt/openhabcloud/public/css;
	}
	location /js {
		alias /opt/openhabcloud/public/js;
	}
	location /img {
		alias /opt/openhabcloud/public/img;
	}
	location /bootstrap {
		alias /opt/openhabcloud/public/bootstrap;
	}
	location /font-icons {
		alias /opt/openhabcloud/public/font-icons;
	}
	location /fonts {
		alias /opt/openhabcloud/public/fonts;
	}
	location /js-plugin {
		alias /opt/openhabcloud/public/js-plugin;
	}
	location /downloads {
		alias /opt/openhabcloud/public/downloads;
	}

	#OH Socket.io Connections
	location /socket.io {
		proxy_pass http://socketapp;
		proxy_redirect off;
		proxy_http_version 1.1;
		proxy_set_header Host $host;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
		proxy_set_header X-Real-IP $remote_addr ;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ;
		proxy_set_header X-Forwarded-Proto https;
	}

	#all other connections
	location / {
		set $upstream_server webapp;
		#if we have a cookie, try using this server
		#also, ifIsEvil https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/
		#for why we use this as little as possible
		if ($http_cookie ~ "CloudServer=(\S+)\%3A(\d+).*") {
			set $upstream_host $1;
			set $upstream_port $2;
			set $upstream_server "${upstream_host}:${upstream_port}";
		}

		proxy_pass http://$upstream_server;
		proxy_redirect off;
		proxy_http_version 1.1;
		recursive_error_pages on;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr ;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ;
		proxy_set_header X-Forwarded-Proto https;
		proxy_intercept_errors on;
		error_page 301 302 307 = @handle_proxy;
		#if this server is down we need to try a new upstream
		error_page 500 501 502 503 504 = @proxy_down;
	}

	#if the proxy specified in our cookie is down, we will pick a new one
	location @proxy_down {
		proxy_pass http://webapp;
		proxy_redirect off;
		proxy_http_version 1.1;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr ;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ;
		proxy_set_header X-Forwarded-Proto https;
		proxy_intercept_errors on;
		recursive_error_pages on;
		error_page 301 302 307 = @handle_proxy;
	}
	#The cloud-director process will send back a 302 with the location of the
	#server to proxy to which this will follow and proxy the original request
	location @handle_proxy {
		set $proxy_server '$upstream_http_location';
		proxy_pass $proxy_server;
		proxy_redirect off;
		proxy_http_version 1.1;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr ;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ;
		proxy_set_header X-Forwarded-Proto https;
		recursive_error_pages on;
		error_page 301 302 307 = @handle_proxy;
	}
}
